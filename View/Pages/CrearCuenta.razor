@page "/CrearCuenta"

@using MySql.Data.MySqlClient
@using Proyecto_Blog.Controllers
@using Proyecto_Blog.Models
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Crear Cuenta</PageTitle>

<div class="container mt-5">
    <div class="custom-container">
        <h3>Crear Cuenta</h3>
        <div class="p-2 flex-fill">
            <input type="text" @bind="nombreUsuario" class="form-control" id="nombreUsuario" placeholder="Usuario"
                required />
            <div class="form-text">Debe ingresar su nombre de usuario</div>
            <div class="from-text">@NombreDeUsuarioDebil</div>
        </div>
        <div class="p-2 flex-fill">
            <label for="correo" class="form-label">Ingrese su correo electrónico</label>
            <input type="email" @bind="correo" class="form-control" id="correo" placeholder="Correo electrónico"
                required />
            <div class="form-text">Debe ingresar su correo electrónico</div>
        </div>
        <div class="p-2 flex-fill">
            <label for="contrasenia" class="form-label">Ingrese su contraseña</label>
            <input type="password" @bind="contrasenia" class="form-control" id="contrasenia" placeholder="Contraseña"
                required />
            <div class="form-text">Debe ingresar su contraseña</div>
            <div class="from-text">@ContraseniaDebil</div>
        </div>
        <button type="submit" class="btn btn-primary" @onclick="ValidarDatos">Crear Cuenta</button>

        @if (band)
        {
            <div class="alert alert-danger mt-3" role="alert">
                Datos incompletos: @Mensaje
                <script>alert('Datos faltantes. Intente más tarde.')</script>
            </div>
        }
    </div>
</div>

@code {
    private string nombreUsuario = "", correo = "", contrasenia = "", Mensaje = "",
    NombreDeUsuarioDebil = "El nombre de usuario debe tener al menos 10 caracteres.",
    ContraseniaDebil = "La contraseña debe tener al menos 8 caracteres y un caracter especial.";
    private bool band = false;
    private ControladorUsuario? controladorUsuario = null;

    private async Task ValidarDatos()
    {
        band = false;
        if (VerificarContrasenia() && VerificarNombreUsuario())
        {
            if (await ValidateData())
            {
                Navigation.NavigateTo("/");
            }
        }

    }

    private async Task<bool> ValidateData()
    {
        if (!validarCorreo())
        {
            Mensaje = "El correo debe ser de Gmail.";
            band = true;
            return false;
        }

        if (string.IsNullOrWhiteSpace(nombreUsuario) || string.IsNullOrWhiteSpace(correo) ||
        string.IsNullOrWhiteSpace(contrasenia))
        {
            Mensaje = "Todos los campos son obligatorios.";
            band = true;
            return false;
        }

        try
        {
            controladorUsuario = new ControladorUsuario(new Usuario(0, nombreUsuario, correo, contrasenia));
            if (controladorUsuario != null)
            {
                return await controladorUsuario.AgregarUsuario();
            }
        }
        catch (MySqlException e)
        {
            Mensaje = e.Message;
            band = true;
        }
        return false;
    }

    private bool validarCorreo()
    {
        return correo.EndsWith("@gmail.com");
    }

    private bool VerificarNombreUsuario()
    {
        if (nombreUsuario.Length < 10)
        {
            NombreDeUsuarioDebil = "El nombre de usuario debe tener al menos 10 caracteres.";
            return false;
        }
        NombreDeUsuarioDebil = "";
        return true;
    }

    private bool VerificarContrasenia()
    {
        if (contrasenia.Length < 8)
        {
            ContraseniaDebil = "La contraseña debe tener al menos 8 caracteres.";
            return false;
        }
        ContraseniaDebil = "";
        return true;
    }
}